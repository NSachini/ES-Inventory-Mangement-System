<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAPD3AQDw9wEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAADAAAAAgAAAAIAAAACAAAAAwAA
        AAIAAAAAAAAAAQAAAAMAAAACAAAAAgAAAAIAAAACAAAAAwAAAAEAAAAAAAAAAgAAAAMAAAACAAAAAgAA
        AAIAAAADAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAACGAAAAwwAA
        ALcAAAC5AAAAtwAAAMUAAAB9AAAAAAAAACoAAAC+AAAAuAAAALkAAAC5AAAAuAAAAL4AAAAqAAAAAAAA
        AH0AAADFAAAAtwAAALkAAAC3AAAAwwAAAIYAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAA
        ALoAAAD/AAAA/AAAAP8AAAD7AAAA/wAAAK0AAAAAAAAAOgAAAP8AAAD+AAAA/wAAAP8AAAD+AAAA/wAA
        ADoAAAAAAAAArQAAAP8AAAD7AAAA/wAAAPwAAAD/AAAAugAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAAAAAAtwAAAP8AAAD5AAAA/AAAAPgAAAD/AAAAqgAAAAAAAAA6AAAA/wAAAPsAAAD8AAAA/AAA
        APsAAAD/AAAAOgAAAAAAAACqAAAA/wAAAPgAAAD8AAAA+QAAAP8AAAC3AAAAAAAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAAAAAC5AAAA/wAAAPwAAAD/AAAA+wAAAP8AAACsAAAAAAAAADoAAAD/AAAA/gAA
        AP8AAAD/AAAA/gAAAP8AAAA6AAAAAAAAAKwAAAD/AAAA+wAAAP8AAAD8AAAA/wAAALkAAAAAAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAALcAAAD/AAAA+AAAAPsAAAD4AAAA/wAAAKoAAAAAAAAAOQAA
        AP8AAAD6AAAA+wAAAPsAAAD6AAAA/wAAADkAAAAAAAAAqgAAAP8AAAD4AAAA+wAAAPgAAAD/AAAAtwAA
        AAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAugAAAP8AAAD8AAAA/wAAAPsAAAD/AAAArQAA
        AAAAAAA6AAAA/wAAAP4AAAD/AAAA/wAAAP4AAAD/AAAAOgAAAAAAAACtAAAA/wAAAPsAAAD/AAAA/AAA
        AP8AAAC6AAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAB7AAAAswAAAKcAAACpAAAAqAAA
        ALcAAAB1AAAAAAAAACkAAACxAAAAqwAAAKkAAACpAAAAqwAAALEAAAApAAAAAAAAAHUAAAC3AAAAqAAA
        AKkAAACnAAAAswAAAHsAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AAQAAAAEAAAAAAAAAB0AAAA+AAAAOAAAADcAAAA3AAAAPAAAADQAAAAFAAAABQAAADQAAAA8AAAANwAA
        ADcAAAA4AAAAPgAAAB0AAAAAAAAABAAAAAQAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQAAAAAAAAAdwAAAP8AAAD7AAAA/wAAAP0AAAD/AAAA5AAAAAYAAAAGAAAA5AAA
        AP8AAAD9AAAA/wAAAPsAAAD/AAAAdwAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAB2AAAA/wAAAPoAAAD+AAAA/AAAAP8AAADiAAAABQAA
        AAUAAADiAAAA/wAAAPwAAAD+AAAA+gAAAP8AAAB2AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAHcAAAD/AAAA+wAAAP8AAAD9AAAA/wAA
        AOMAAAAGAAAABgAAAOMAAAD/AAAA/QAAAP8AAAD7AAAA/wAAAHcAAAAAAAAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAdwAAAP8AAAD7AAAA/wAA
        AP0AAAD/AAAA4wAAAAYAAAAGAAAA4wAAAP8AAAD9AAAA/wAAAPsAAAD/AAAAdwAAAAAAAAAEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAB2AAAA/wAA
        APoAAAD+AAAA/AAAAP8AAADiAAAABQAAAAUAAADiAAAA/wAAAPwAAAD+AAAA+gAAAP8AAAB2AAAAAAAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAA
        AHcAAAD/AAAA+wAAAP8AAAD9AAAA/wAAAOQAAAAGAAAABgAAAOQAAAD/AAAA/QAAAP8AAAD7AAAA/wAA
        AHcAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAQAAAACAAAAAAAA
        AAEAAAAAAAAAGgAAADsAAAA2AAAANwAAADcAAAA4AAAAMQAAAAEAAAABAAAAMQAAADgAAAA3AAAANwAA
        ADYAAAA7AAAAGgAAAAAAAAABAAAAAAAAAAIAAAAEAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAADAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAA
        AFUAAACSAAAAIgAAAAAAAAABAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAIAAAAAAAAAAAAA
        AAIAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAQAAAAAAAAApAAAAnQAAAIUAAAABAAAAAAAA
        AAAAAAAAAAAA0gAAAP8AAADyAAAAlQAAAB8AAAAAAAAAAQAAAAMAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAADAAAAAQAAAAAAAAAlAAAAngAAAPcAAAD/AAAA+AAA
        AB4AAAAAAAAAAgAAAAAAAABFAAAA0gAAAP8AAAD/AAAA8wAAAJEAAAAdAAAAAAAAAAEAAAADAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAADAAAAAQAAAAAAAAAhAAAAmAAAAPYAAAD/AAAA/wAA
        ANEAAABTAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAEAAAAVQAAAM4AAAD/AAAA/wAAAPIAAACNAAAAGwAA
        AAAAAAABAAAABAAAAAIAAAAAAAAAAAAAAAIAAAAEAAAAAQAAAAAAAAAdAAAAkwAAAPQAAAD/AAAA/wAA
        AM4AAABWAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAIAAAAAAAAAAwAAAFMAAADMAAAA/wAA
        AP8AAADwAAAAigAAABkAAAAAAAAAAQAAAAQAAAAEAAAAAQAAAAAAAAAaAAAAjQAAAPIAAAD/AAAA/wAA
        AMwAAABUAAAAAwAAAAAAAAACAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAACAAAAAAAA
        AAMAAABQAAAAygAAAP8AAAD/AAAA7wAAAIYAAAAXAAAAAAAAAAAAAAAXAAAAiAAAAPAAAAD/AAAA/wAA
        AMoAAABRAAAAAwAAAAAAAAACAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAEAAAAAgAAAAAAAAACAAAATgAAAMgAAAD/AAAA/wAAAO8AAAB7AAAAewAAAO8AAAD/AAAA/wAA
        AMgAAABPAAAAAgAAAAAAAAACAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAIAAAAAAAAAAgAAAEsAAADGAAAA/wAAAP4AAAD+AAAA/wAA
        AMYAAABMAAAAAgAAAAAAAAACAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAACAAAAAAAAAAEAAABIAAAAyAAA
        AMgAAABJAAAAAQAAAAAAAAACAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAgAA
        AAAAAAAEAAAABAAAAAAAAAACAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABAAAAAIAAAACAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////AQCA/QEAgL/////5AQCAmQEAgJkBAICZAQCAmQEAgJkBAICZAQ
        CAn/////0QAAi/EAAI/9AAC//QAAv/0AAL/9AAC/zQAAs0UAAKHZP/yTRAAAIUETyIFARCICoBGIBUgE
        IBOiAYBF6IABF/ogBF/+iBF//6JF///oF/8=
</value>
  </data>
</root>